// Pooled Websockets by Eeems (MIT Licence): https://github.com/Eeems/PooledWebSocket/blob/master/LICENSE
var sockets={},sanitize=function(e){var t={};Object.getOwnPropertyNames(e).forEach(function(o){var s=e[o];if(typeof s=="object"){s=sanitize(s)}t[o]=s});return t},handle=function(e){if(e.data){var t=JSON.parse(e.data),o=e.source||e.target;if(["open","ping"].indexOf(t.action)==-1&&(!sockets[t.url]||!sockets[t.url].socket.readyState===1)){throw new Error("Socket not open. "+e.data)}else{switch(t.action){case"open":var s=sockets[t.url];if(s){s=sockets[t.url];s.ports.push(o);s.property("extensions");s.property("protocol");s.property("readyState");s.property("url");s.event("open",[])}else{var r=new WebSocket(t.url,t.protocols);s={url:t.url,socket:r,ports:[o],postMessage:function(e){e.url=s.url;e=JSON.stringify(sanitize(e));if(s.ports[0]){s.ports.forEach(function(t){t.postMessage(e)})}else if("postMessage"in self){postMessage(e)}},event:function(e,t){s.postMessage({action:"event",event:e,arguments:Array.prototype.slice.call(t)})},property:function(e){s.postMessage({action:"property",name:e,value:r[e]})}};r.onopen=function(){s.property("extensions");s.property("protocol");s.property("readyState");s.property("url");s.event("open",arguments)};r.onmessage=function(e){s.property("extensions");s.property("readyState");var t=Array.prototype.slice.call(arguments);t[0]=Object.assign({},e);if(e.data instanceof Blob){var o=new FileReaderSync;t[0].data=o.readAsText(e.data);s.event("message",t)}else{t[0].data=e.data+"";s.event("message",t)}};r.onerror=function(){s.property("extensions");s.property("readyState");s.event("error",arguments)};r.onclose=function(){s.property("extensions");s.property("readyState");s.event("close",arguments);delete sockets[t.url]};sockets[t.url]=s;console.info("Socket connection created")}break;case"send":sockets[t.url].socket.send(t.data);break;case"close":sockets[t.url].socket.close();break;case"property":sockets[t.url].property(t.name);break;case"detach":var s=sockets[t.url];if(s.ports.indexOf(o)!=-1){s.ports.splice(s.ports.indexOf(o))}if(s.ports.length===0){s.socket.close()}o.postMessage(JSON.stringify(sanitize({url:s.url,action:"event",event:"close",arguments:[]})));break}}}};self.addEventListener("message",handle);onconnect=function(e){e.ports.forEach(function(e){e.onmessage=handle;e.start()})};if("clients"in self){clients.claim()}
